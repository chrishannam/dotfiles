#+PROPERTY: header-args :results output :session client :tangle yes :comments org :exports both
* Nix
:PROPERTIES:
:header-args: :session client
:END:

The document is mostly for OSX at the moment.

Before Nix everybody has the same path - dotfiles, symlinks etc.

Then =homebrew= to manage the software installation. It is all not bad until you
want to update some software or have several versions of the same library on
several machines.

*Expectations*
- Use declarative nature of Nix from the beginning
- The declared packages are versioned
- Use on OSX as a package manager first
- Use on OSX as a solution for isolated environments (python development).

In the first step I imagined a shell where declared in the configuration
software is installed.

** [OSX] Where to start?

- Install nix ([[https://github.com/NixOS/nix/issues/2925#issuecomment-539570232][on catalina]])
- [[https://nixos.org/nixos/nix-pills/enter-environment.html][Enter the profile]] environment (default profile).

#+begin_src bash
source ~/.nix-profile/etc/profile.d/nix.sh
#+end_src

- Create =~/.nixpkgs/config.nix= this is where the power of Nix starts
  ([[https://news.ycombinator.com/item?id=11803558][source]]). The file user-local settings for Nix Packages.

From =dotfiles=

#+begin_src bash
git clone https://github.com/signalpillar/dotfiles ~/proj
mkdir -p ~/.nixpkgs/
cd ~/.nixpkgs
ln -s ~/proj/dotfiles/nix/.nixpkgs/ ~/.nixpkgs
#+end_src

To install the declared

#+begin_src bash
nix-env -i osx-desktop
#+end_src

** Where to go next ?
After I achive my primary goals and get some confidence in Nix.

Looks like [[https://github.com/rycee/home-manager][home-manager]] is an expected way to go but I want to try things myself
before I use a complete solution.
Also there's also =nix-darwin=, which almost turns macOS into NixOS. It lets you
configure all kinds of services and system settings with Nix, plus global system
package management.

** Daily usage
*** Package info

#+begin_example
nix-env -qa --description <pkg-name>
#+end_example

*** Get package description

#+begin_src bash
nix-env -qa --description '.*emacs.*'
#+end_src

*** List packages

List installed packages

#+begin_src bash :async
nix-env -qs
#+end_src

List all available packages

#+begin_src bash
nix-env -qaP
#+end_src

*** Upgrade the packages
#+begin_src bash
nix-env -u
#+end_src

*** Collect garbage

#+begin_src bash
nix-collect-garbage -d
#+end_src

*** Resources

- [[https://github.com/garbas/dotfiles][Inspiration]]
- [[https://github.com/nmattia/homies][Homies]] (interesting project)
** Build Python package

Enter the shell with the build dependencies so we can build the virtual
environment.

#+begin_src bash
nix-shell \
  -p pkgconfig \
  -p openssl \
  -p libffi \
  -p postgresql \
  -p graphviz
  # This line is not required unless site-packages are shared with virtualenv.
  # -p '(python36.withPackages(ps: with ps; [ cryptography ]))'
#+end_src

=gcc= and some other tools are installed globally.

Snippet from tox file that customises install command.

#+begin_example
[testenv]
...
install_command = pip install --prefix {envdir} -vv --extra-index-url={env:EXTRA_INDEX_URL:} {opts} {packages}
#+end_example

=--prefix= is required because for some reason by default it is python artifact
path - not the root of the environment directory.
** Project environment

Each projet can have own =default.nix= file like in this example

#+begin_src nix
with import <nixpkgs> {};
stdenv.mkDerivation rec {
  name = "env";
  env = buildEnv { name = name; paths = buildInputs; };
  buildInputs = [
    python
    python27Packages.virtualenv
    python27Packages.pip
    go_1_4
    lua5_3
  ];
}
#+end_src

To work on the project

#+begin_src bash

$ cd ~/proj/X/
$ nix-shell
[nix-shell:~/proj/X]$
#+end_src
** Random facts

[[https://nixos.org/nixpkgs/][nixpkgs]], the default source of packages for the nix package manager, has many of
the basic command-line packages youâ€™ll need on OS X ([[https://www.mpscholten.de/nixos/2016/05/26/my-experience-with-nix-on-osx.html?][source]]).

* NixOS

Installation - [[http://fluffynukeit.com/installing-nixos/][nice blog post]] by Daniel Austin
